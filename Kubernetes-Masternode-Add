Adding a new **master node** (or control plane node) to a Kubernetes cluster can help improve the scalability, 
availability, and redundancy of the cluster. Here’s a step-by-step guide to adding a new master node to an existing Kubernetes cluster.

### **Prerequisites**

1. **Existing Kubernetes cluster** with at least one master node.
2. SSH access to the existing master node and the new node.
3. **kubeadm** installed on both the existing and the new master node.
4. The **kubeadm token** and **certificate key** from the existing cluster for joining the new node.
5. **Control plane components** (e.g., `etcd`, `kube-apiserver`, `kube-controller-manager`, and `kube-scheduler`) will be automatically installed on the new master.

### **Steps to Add a New Master Node to Kubernetes Cluster**

#### **Step 1: Prepare the New Master Node**

Before joining the new master node, it must be set up as a fresh node.

1. **Install Kubernetes prerequisites**:
   On the new master node, install `kubeadm`, `kubelet`, and `kubectl`:

   sudo apt-get update
   sudo apt-get install -y kubelet kubeadm kubectl
   sudo apt-mark hold kubelet kubeadm kubectl

2. **Ensure the new master node is connected** to the same network as the existing cluster (for intra-cluster communication).

#### **Step 2: Retrieve Cluster Join Token and Certificate Key**

On the **existing master node**, run the following command to get the **kubeadm join command** with the appropriate **token** and **certificate key** for control plane setup:

kubeadm token create --print-join-command

This will output a command similar to:

kubeadm join <master-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash> \
    --control-plane --certificate-key <certificate-key>

The `--control-plane` flag ensures that the new node will be added as a master node (not a worker node), and the `--certificate-key` ensures secure transmission of the certificate between the nodes.

#### **Step 3: Join the New Node as a Control Plane Node**

On the **new master node**, run the join command you retrieved from Step 2:

kubeadm join <master-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash> \
    --control-plane --certificate-key <certificate-key>

The new node will pull the cluster’s configuration, set up the control plane components (`kube-apiserver`, `kube-controller-manager`, 
`kube-scheduler`), and configure `etcd`.

#### **Step 4: Approve the CSR (If Required)**

Sometimes, the new node may generate a **Certificate Signing Request (CSR)** that needs to be approved manually. To approve it, run the following command on the existing master node:

kubectl get csr
kubectl certificate approve <csr-name>

This will approve the new master's certificate.

#### **Step 5: Verify the New Master Node**

Once the new node is joined, verify that it has been added successfully as a master node:

kubectl get nodes

You should see the new node listed with the role of `master` (or `control-plane`).

NAME            STATUS   ROLES           AGE    VERSION
master-node-1   Ready    master          10d    v1.24.0
new-master      Ready    master          5m     v1.24.0

#### **Step 6: Check Control Plane Components**

You can check if the control plane components (`kube-apiserver`, `kube-scheduler`, `kube-controller-manager`, and `etcd`) are running on the new master node:

kubectl get pods -n kube-system -o wide | grep <new-master-hostname>

You should see the control plane components running on the new master node.

#### **Step 7: Check `etcd` Health**

Since `etcd` is replicated across all master nodes, verify that the `etcd` cluster is healthy and includes the new node.

On one of the master nodes, run the following command:

kubectl exec -n kube-system etcd-<existing-master-node> -- etcdctl member list

You should see the new master node listed as a member of the `etcd` cluster.

### **Additional Considerations**

1. **Load Balancing**: If you're using multiple control plane nodes for high availability (HA), you should have a load balancer in front of them to balance traffic across all the masters. Make sure the new master node is added to the load balancer.

2. **HA Proxy or API Server Endpoint Update**: In case you have HAProxy or any custom API server endpoint configuration, you may need to add the new master node to the backend servers list to balance API requests properly.

### **Summary**

- **Install** the necessary Kubernetes components (`kubeadm`, `kubelet`, and `kubectl`) on the new master node.
- **Use** the `kubeadm join` command with the `--control-plane` flag to add the new master node to the cluster.
- **Approve** the new node's certificate if required.
- **Verify** that the new node is properly joined as a master node using `kubectl get nodes` and ensure that control plane components are running correctly.
- **Check etcd** membership to verify the `etcd` cluster has included the new master node.

By following these steps, you can successfully add a new master node to your Kubernetes cluster, ensuring high availability and redundancy.

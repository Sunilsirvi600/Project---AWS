Adding a new **worker node** to a Kubernetes cluster involves joining the new node to the existing cluster so that it can host workloads. Hereâ€™s a step-by-step guide on how to add a new worker node using **kubeadm**.

### **Prerequisites**
1. **Existing Kubernetes cluster** with at least one master node.
2. SSH access to the new worker node.
3. **kubeadm** installed on the new worker node.
4. You have the **join token** and the **discovery-token-ca-cert-hash** from the existing cluster to authenticate the new node.

### **Steps to Add a New Worker Node to Kubernetes Cluster**

#### **Step 1: Prepare the New Worker Node**

1. **Install Kubernetes components** (`kubeadm`, `kubelet`, `kubectl`) on the new worker node:

   First, update the system and install necessary tools:
   sudo apt-get update
   sudo apt-get install -y apt-transport-https curl
   
2. **Add Kubernetes APT repository** and install the required Kubernetes components:
   
   sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
   sudo apt-get update
   sudo apt-get install -y kubelet kubeadm kubectl
   sudo apt-mark hold kubelet kubeadm kubectl
   
3. **Disable swap** (Kubernetes requires that swap is disabled on the node):
   
   sudo swapoff -a
   sudo sed -i '/ swap / s/^/#/' /etc/fstab
   
4. **Ensure the worker node is connected** to the same network as the Kubernetes cluster for intra-cluster communication.

#### **Step 2: Retrieve Cluster Join Command**

On the **existing master node**, run the following command to generate the **kubeadm join command** that will allow the worker node to join the cluster:

kubeadm token create --print-join-command

This will output a command similar to:

kubeadm join <master-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash>

This command includes the necessary **token** and **discovery-token-ca-cert-hash** required for the new worker node to authenticate and securely join the cluster.

#### **Step 3: Join the Worker Node to the Cluster**

On the **new worker node**, run the join command you obtained from Step 2:

kubeadm join <master-ip>:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash>

- This command tells the new node to join the cluster by contacting the API server running on the master node.
- The **discovery-token-ca-cert-hash** ensures that the new node joins the correct cluster securely.

#### **Step 4: Verify the New Worker Node**

On the **master node**, check if the new worker node has successfully joined the cluster and is ready to host workloads:

kubectl get nodes

You should see the new worker node listed along with the existing nodes. The status should be `Ready`:

NAME             STATUS   ROLES    AGE     VERSION
master-node-1    Ready    master   10d     v1.24.0
new-worker-node  Ready    <none>   2m      v1.24.0

If the new node is **NotReady**, it may be due to networking issues (CNI plugin not installed) or other misconfigurations.

#### **Step 5: (Optional) Install CNI Plugin on Worker Node**

In some cases, especially in on-prem or self-managed Kubernetes clusters, the **CNI (Container Network Interface)** plugin needs to be installed on the worker node for proper networking between pods.

For example, to install the **Weave** CNI plugin:

kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')

Other popular CNI plugins include **Calico**, **Flannel**, and **Cilium**. The appropriate CNI plugin should match the one being used in the cluster.

#### **Step 6: Verify Node Functionality**

You can also verify that the node is functioning by checking the status of pods:

kubectl get pods -o wide --all-namespaces

Ensure that the new worker node is hosting workloads and is part of the cluster.

### **Troubleshooting**
- **NotReady State**: If the new worker node shows up in `NotReady` state, this could be due to:
  - Missing CNI plugin: Ensure the CNI plugin is properly installed.
  - Network misconfiguration: Check that the worker node can communicate with the master node.
  - Misconfigured firewall: Ensure the required ports are open for Kubernetes control plane communication.

- **Checking Logs**: If something goes wrong, you can check the logs of `kubelet` on the worker node for troubleshooting:

  journalctl -u kubelet -f

### **Summary**

1. **Prepare the new worker node** by installing `kubeadm`, `kubelet`, and `kubectl` and disabling swap.
2. **Retrieve the join command** from the master node using `kubeadm token create --print-join-command`.
3. **Run the join command** on the new worker node to securely join it to the cluster.
4. **Verify** that the new worker node is part of the cluster using `kubectl get nodes`.
5. If needed, **install the CNI plugin** to ensure networking between pods.

By following these steps, you can successfully add a new worker node to your Kubernetes cluster.

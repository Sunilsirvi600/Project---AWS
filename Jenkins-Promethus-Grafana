To set up **Prometheus** and **Grafana** for monitoring **Jenkins**, you can follow these steps. 
### Overview of the Steps:
1. Install the Prometheus and Grafana servers.
2. Set up the **Prometheus Plugin** in Jenkins to expose metrics.
3. Configure Prometheus to scrape metrics from Jenkins.
4. Set up Grafana to visualize Jenkins metrics from Prometheus.

---

## Step 1: Install Prometheus and Grafana Servers

### 1.1 Install Prometheus

First, download and install Prometheus on your server.

#### Commands to install Prometheus on Ubuntu:

1. Download the Prometheus tarball:

   ```bash
   wget https://github.com/prometheus/prometheus/releases/download/v2.46.0/prometheus-2.46.0.linux-amd64.tar.gz
   ```

2. Extract the downloaded tarball:

   ```bash
   tar xvfz prometheus-*.tar.gz
   ```

3. Move the Prometheus binary and configuration files:

   ```bash
   cd prometheus-2.46.0.linux-amd64
   sudo mv prometheus /usr/local/bin/
   sudo mv promtool /usr/local/bin/
   sudo mv prometheus.yml /etc/prometheus/
   sudo mkdir -p /var/lib/prometheus
   ```

4. Start Prometheus with the following command:

   ```bash
   prometheus --config.file=/etc/prometheus/prometheus.yml
   ```

   You can access Prometheus at `http://<your-server-ip>:9090`.

### 1.2 Install Grafana

#### Commands to install Grafana on Ubuntu:

1. Install Grafana by adding the official APT repository:

   ```bash
   sudo apt-get install -y software-properties-common
                              sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
                              wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
   ```
# Download the GPG Key and save it in the trusted.gpg.d directory:
 wget -q -O - https://packages.grafana.com/gpg.key | sudo tee /etc/apt/trusted.gpg.d/grafana.gpg > /dev/null

# Add the Grafana repository:
 echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list

2. Install Grafana:

   ```bash
   sudo apt-get update
   sudo apt-get install grafana
   ```

3. Start and enable Grafana:

   ```bash
   sudo systemctl start grafana-server
   sudo systemctl enable grafana-server
   ```

   You can now access Grafana by navigating to `http://<your-server-ip>:3000` in a browser. The default login credentials are:
   - Username: `admin`
   - Password: `admin`

---

## Step 2: Install the Prometheus Plugin in Jenkins

The **Prometheus plugin** for Jenkins exposes Jenkins metrics for Prometheus to scrape.

### 2.1 Install the Prometheus Plugin in Jenkins

1. Open **Jenkins Dashboard** → **Manage Jenkins** → **Manage Plugins**.
2. Under the **Available** tab, search for the `Prometheus Metrics Plugin` and install it.
3. Once installed, restart Jenkins if needed.

### 2.2 Expose Jenkins Metrics

1. Go to **Jenkins Dashboard** → **Manage Jenkins** → **Configure System**.
2. Scroll down to the **Prometheus** section.
3. Here, you can configure settings like the path to expose metrics. The default path is `/prometheus/`. You can leave it as is or change it if required.
4. Enable **CSRF Protection** if it's disabled to avoid security vulnerabilities.
5. Click **Save** to apply the configuration.

Now Jenkins will expose its metrics at:
```
http://<your-jenkins-url>/prometheus/
```

You can open this URL in a browser to verify that Jenkins metrics are being generated.

---

## Step 3: Configure Prometheus to Scrape Jenkins Metrics

Prometheus needs to scrape metrics from Jenkins periodically.

### 3.1 Modify Prometheus Configuration

1. Open the `prometheus.yml` file in `/etc/prometheus/` or wherever your Prometheus configuration is located.
2. Add a scrape job for Jenkins metrics:

   ```yaml
   scrape_configs:
     - job_name: 'jenkins'
       metrics_path: '/prometheus/'
       static_configs:
         - targets: ['<your-jenkins-url>:<port>']
   ```

   For example, if Jenkins is running on `http://localhost:8080`, your configuration will look like this:

   ```yaml
   scrape_configs:
     - job_name: 'jenkins'
       metrics_path: '/prometheus/'
       static_configs:
         - targets: ['localhost:8080']
   ```

3. Save the configuration and restart Prometheus:

   ```bash
   sudo systemctl restart prometheus
   ```

### 3.2 Verify Prometheus Scrape

- You can verify if Prometheus is scraping Jenkins metrics by visiting the Prometheus UI at:
  ```
  http://<your-prometheus-url>:9090/targets
  ```

- Look for the `jenkins` job under **Active Targets** and ensure it shows a `UP` status.

---

## Step 4: Set Up Grafana to Visualize Jenkins Metrics

Grafana will use Prometheus as the data source to visualize Jenkins metrics.

### 4.1 Add Prometheus as a Data Source in Grafana

1. Log into Grafana by going to `http://<your-grafana-url>:3000`.
2. On the left sidebar, click **Configuration** (the gear icon) → **Data Sources**.
3. Click **Add data source** and select **Prometheus**.
4. In the **URL** field, enter the Prometheus server URL (e.g., `http://localhost:9090` or your Prometheus IP address).
5. Click **Save & Test** to verify the connection.

### 4.2 Import a Jenkins Dashboard

Grafana has many pre-built dashboards available for Jenkins monitoring, and you can import one instead of building from scratch.

1. Go to the **Dashboard** tab on the Grafana interface and click **Import**.
2. You can import a pre-made Jenkins dashboard using its **ID** from the Grafana dashboard repository. A commonly used Jenkins monitoring dashboard has the ID `9966`.
3. Enter the dashboard ID (`9966`), and Grafana will fetch the configuration for you.
4. Select the Prometheus data source and click **Import**.

This will create a Jenkins monitoring dashboard in Grafana with pre-built panels to visualize various metrics, such as:

- **Build duration** and **build status**.
- **Queue size**.
- **Executor availability**.
- **Memory usage** and other system metrics.

### 4.3 Customize Dashboards (Optional)

If you want to create your custom panels:

1. Go to the dashboard and click **Add new panel**.
2. In the **Query** section, write PromQL queries for Jenkins metrics. For example, to monitor the number of successful builds:

   ```promql
   jenkins_builds_successful_total
   ```

3. Configure the visualization type (e.g., time series, bar chart) and save the panel.

---

### Step 5: Monitor Jenkins Metrics in Grafana

Once Grafana is connected to Prometheus and the Jenkins metrics are available, you can monitor various aspects of Jenkins, such as:

- Build success/failure rates.
- Build queue length.
- Jenkins system resource usage.
- Job-specific performance metrics.

These dashboards will provide real-time insights into your Jenkins environment, making it easier to identify and troubleshoot issues.

monitor a **Kubernetes cluster** with **Prometheus** and **Grafana**, you can follow these steps to install and 
configure both services and set up the metrics scraping and visualization system.

Hereâ€™s a complete guide on how to set up Prometheus and Grafana on Kubernetes and visualize the cluster metrics.

### Prerequisites

1. **Kubernetes cluster**: A running Kubernetes cluster.
2. **kubectl**: Installed and configured to access the cluster.
3. **Helm**: A package manager for Kubernetes, which will simplify the installation of Prometheus and Grafana.

### Step 1: Install Helm (If not installed)

If Helm is not installed on your local machine, you can install it using the following commands.

- For Linux/macOS:
  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

- For Windows, follow the official guide: https://helm.sh/docs/intro/install/

### Step 2: Add the Prometheus and Grafana Helm Charts

1. Add the Prometheus Helm chart repository:

   helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
   helm repo update

2. Add the Grafana Helm chart repository:

   helm repo add grafana https://grafana.github.io/helm-charts
   helm repo update

### Step 3: Install Prometheus

Prometheus can be easily installed using the Helm chart provided by the Prometheus community. It will 
automatically start scraping metrics from the Kubernetes cluster.

1. **Create a namespace** for monitoring:

   kubectl create namespace monitoring

2. **Install Prometheus** using Helm:

   helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring

   - This chart installs a Prometheus instance, Alertmanager, and Prometheus node exporters to gather metrics from your Kubernetes nodes.
   - You can customize the Helm chart by adding or modifying values using a custom `values.yaml` file if needed.

3. **Verify the Prometheus installation**:
   - Check the status of the pods to ensure everything is running:
   
     kubectl get pods -n monitoring

   You should see Prometheus-related pods like `prometheus-server`, `prometheus-node-exporter`, and `alertmanager`.

4. **Access Prometheus UI**:
   Prometheus is exposed as a service, and you can access it by forwarding the port to your local machine.
  
   kubectl port-forward -n monitoring svc/prometheus-kube-prometheus-prometheus 9090:9090

   Now, open your browser and go to `http://localhost:9090` to access the Prometheus web UI.

### 3.1 Modify Prometheus Configuration

1. Open the `prometheus.yml` file in  or wherever your Prometheus configuration is located.

# kubectl get cm     (cm is config map)
# kubectl edit cm promethus-server

2. Add a scrape job for Jenkins metrics:
before doing this expose kube-state-metrix
   yaml
   scrape_configs:
     - job_name: 'jenkins'
       metrics_path: '/prometheus/'
       static_configs:
         - targets: ['<your-jenkins-url>:<port>']
     - job_name: 'kube-state-matrix'
       metrics_path: '/kube-state/'
       static_configs:
         - targets: ['promethus-state-metrix:<port>']
   
   For example, if Jenkins is running on `http://localhost:8080`, your configuration will look like this:

   yaml
   scrape_configs:
     - job_name: 'jenkins'
       metrics_path: '/prometheus/'
       static_configs:
         - targets: ['localhost:8080']
   
### Step 4: Install Grafana

Grafana is used to visualize the metrics collected by Prometheus. We'll use Helm to install Grafana.

1. **Install Grafana** using Helm:

   helm install grafana grafana/grafana --namespace monitoring

   This installs Grafana in the `monitoring` namespace.

2. **Verify the Grafana installation**:
   kubectl get pods -n monitoring

   You should see the Grafana pod running, along with the Prometheus pods.

3. **Access Grafana UI**:
   - Grafana is exposed as a service, and you can access it by forwarding the port to your local machine:

    kubectl port-forward -n monitoring svc/grafana 3000:80
    
   - Now open `http://localhost:3000` in your browser.

4. **Login to Grafana**:
   - The default login credentials are:
     - Username: `admin`
     - Password: `prom-operator`
   - You can change the password after logging in.

### Step 5: Connect Prometheus to Grafana

Once you have both Prometheus and Grafana running, you need to configure Grafana to pull data from Prometheus.

1. **Add Prometheus as a data source in Grafana**:
   - Go to the Grafana UI (`http://localhost:3000`), and log in.
   - Click on **Configuration** (the gear icon) on the left sidebar.
   - Click on **Data Sources**, and then **Add Data Source**.
   - Select **Prometheus** as the data source type.
   - In the **URL** field, enter the Prometheus service URL. Since Prometheus is running within the same Kubernetes cluster, use the internal service name (default):
     ```
     http://prometheus-kube-prometheus-prometheus.monitoring.svc:9090
     ```
   - Click **Save & Test**. You should see a message confirming the data source was successfully added.

### Step 6: Import a Kubernetes Dashboard in Grafana

Grafana provides ready-made dashboards for Kubernetes metrics. You can import them from Grafana's dashboard library.

1. **Import a Kubernetes dashboard**:
   - In the Grafana UI, click on the "+" icon on the left sidebar and then click **Import**.
   - Enter the dashboard ID **3119** for the Kubernetes cluster monitoring dashboard, or search for another dashboard by name.
   - Click **Load**.
   - Select the Prometheus data source you configured earlier.
   - Click **Import**.

2. **View the Kubernetes dashboard**:
   - You should now see detailed graphs and metrics for your Kubernetes cluster, including CPU and memory usage, pod metrics, and node-level statistics.

### Step 7: Access and Expose Prometheus and Grafana (Optional)

If you want to access Prometheus and Grafana outside of port forwarding (e.g., via a LoadBalancer or Ingress), you can expose the services using a LoadBalancer or Ingress resource.

#### a. **Expose Prometheus and Grafana via LoadBalancer**

1. **Update the Prometheus and Grafana services** to use a LoadBalancer:
   - Edit the Prometheus service:
     
     kubectl edit svc prometheus-kube-prometheus-prometheus -n monitoring
     
   - Change the `type` field from `ClusterIP` to `LoadBalancer`.

   - Repeat the same for the Grafana service:
     
     kubectl edit svc grafana -n monitoring
     
   - Once updated, AWS or your cloud provider will provision an external IP for these services, which you can use to access the Prometheus and Grafana dashboards externally.

#### b. **Expose Prometheus and Grafana using Ingress (Optional)**

You can also set up an Ingress controller to expose both Prometheus and Grafana via an Ingress resource.

1. **Install an Ingress controller** (e.g., NGINX Ingress controller):
   
   helm install nginx-ingress ingress-nginx/ingress-nginx --namespace monitoring
   
2. **Create an Ingress resource** for Prometheus and Grafana:
   ```yaml
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: prometheus-ingress
     namespace: monitoring
     annotations:
       nginx.ingress.kubernetes.io/rewrite-target: /
   spec:
     rules:
       - host: prometheus.your-domain.com
         http:
           paths:
             - path: /
               pathType: Prefix
               backend:
                 service:
                   name: prometheus-kube-prometheus-prometheus
                   port:
                     number: 9090
   ---
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: grafana-ingress
     namespace: monitoring
     annotations:
       nginx.ingress.kubernetes.io/rewrite-target: /
   spec:
     rules:
       - host: grafana.your-domain.com
         http:
           paths:
             - path: /
               pathType: Prefix
               backend:
                 service:
                   name: grafana
                   port:
                     number: 80
   ```

3. **Apply the Ingress resource**:
   ```bash
   kubectl apply -f ingress.yaml
   ```

### Step 8: Monitor and Visualize Kubernetes Metrics

Now, Prometheus will continuously scrape metrics from your Kubernetes cluster, and Grafana will visualize these metrics. You can further customize dashboards or add additional data sources for more complex monitoring setups.

### Summary

1. **Install Prometheus** using Helm, which will automatically start scraping Kubernetes metrics.
2. **Install Grafana** using Helm for visualizing metrics.
3. **Configure Grafana** to pull metrics from Prometheus.
4. **Import Kubernetes dashboards** into Grafana for easy monitoring.
5. Optionally, **expose Prometheus and Grafana** using a LoadBalancer or Ingress for external access.

